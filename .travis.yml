# 관리자 권한 획득
sudo: required

# 언어(플랫폼 설정)
language: generic

# 서비스 환경 설정
services:
  - docker

# 테스트 전 기본적으로 설정 할 것
before_install:
  - echo "start crating an image with dockerfile" # 기본 출력문
  - docker build -t dlwlgns4612/docker-react-app -f ./docker-learn/react-docker-app/dockerfile.dev ./docker-learn/react-docker-app # docker환경에서 run test를 하기 위해서는 build 작업이 필요하므로 image build 작업을 해준다.

# 실제로 작동할 부분.
script:
  - docker run -e CI=true dlwlgns4612/docker-react-app npm run test -- --coverage

# script 부분 성공 후 나올 부분
after_success:
  - echo "Test Success"
  # =========================================================

# 테스트가 성공 후, 실제 배포를 설정할 부분
  # deploy:
  #   provider: elasticbeanstalk # 외부 서비스 표시
  #   region: "us-east-2" # 현재 사용하고 있는 aws의 서비스가 위치하고있는 물리적 장소
  #   app: "docker-react-app" # 생성된 APP의 이름
  #   env: "Dockerreactapp-env" # 환경설정 
  #   bucket_name: "elasticbeanstalk-us-east-2-907476727759" # 해당 elastic beanstalk를 위한 S3 bucket 이름
  #   bucket_path: "docker-react-app" # app 이름과 동일
  #   on:
  #     branch: master # 어떤 branch에 push를 할 때 AWS에 배포를 할 것인지 설정
  #   access_key_id: $AWS_ACCESS_KEY # AWS에서 IAM USER 생성시 발급된 ACCESS KEY를 github와 연동된 Travis CI 계정에서 변수로 만들어 사용한다. (KEY값은 외부에 노출되면 안됨)
  #   secret_access_key: $AWS_SECRET_ACCESS_KEY #위와 동일한 SECRET_ACCESS 값 